// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package validation



@SerialVersionUID(0L)
final case class Extend(
    typeName: String = "",
    superName: String = ""
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[Extend] with com.trueaccord.lenses.Updatable[Extend] {
    @transient
    private[this] var __serializedSizeCachedValue: Int = 0
    private[this] def __computeSerializedValue(): Int = {
      var __size = 0
      if (typeName != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, typeName) }
      if (superName != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, superName) }
      __size
    }
    final override def serializedSize: Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
      {
        val __v = typeName
        if (__v != "") {
          _output__.writeString(1, __v)
        }
      };
      {
        val __v = superName
        if (__v != "") {
          _output__.writeString(2, __v)
        }
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): validation.Extend = {
      var __typeName = this.typeName
      var __superName = this.superName
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __typeName = _input__.readString()
          case 18 =>
            __superName = _input__.readString()
          case tag => _input__.skipField(tag)
        }
      }
      validation.Extend(
          typeName = __typeName,
          superName = __superName
      )
    }
    def withTypeName(__v: String): Extend = copy(typeName = __v)
    def withSuperName(__v: String): Extend = copy(superName = __v)
    def getFieldByNumber(__fieldNumber: Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = typeName
          if (__t != "") __t else null
        }
        case 2 => {
          val __t = superName
          if (__t != "") __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(typeName)
        case 2 => _root_.scalapb.descriptors.PString(superName)
      }
    }
    override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
    def companion = validation.Extend
}

object Extend extends com.trueaccord.scalapb.GeneratedMessageCompanion[validation.Extend] {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[validation.Extend] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): validation.Extend = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    validation.Extend(
      __fieldsMap.getOrElse(__fields.get(0), "").asInstanceOf[String],
      __fieldsMap.getOrElse(__fields.get(1), "").asInstanceOf[String]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[validation.Extend] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      validation.Extend(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[String]).getOrElse("")
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = ValidationProto.javaDescriptor.getMessageTypes.get(1)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = ValidationProto.scalaDescriptor.messages(1)
  def messageCompanionForFieldNumber(__number: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = validation.Extend(
  )
  implicit class ExtendLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, validation.Extend]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, validation.Extend](_l) {
    def typeName: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.typeName)((c_, f_) => c_.copy(typeName = f_))
    def superName: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.superName)((c_, f_) => c_.copy(superName = f_))
  }
  final val TYPENAME_FIELD_NUMBER = 1
  final val SUPERNAME_FIELD_NUMBER = 2
}
