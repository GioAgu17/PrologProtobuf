// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package validation



@SerialVersionUID(0L)
final case class ThisInvocation(
    paramLst: String = "",
    id: Int = 0,
    depth: Int = 0
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[ThisInvocation] with com.trueaccord.lenses.Updatable[ThisInvocation] {
    @transient
    private[this] var __serializedSizeCachedValue: Int = 0
    private[this] def __computeSerializedValue(): Int = {
      var __size = 0
      if (paramLst != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, paramLst) }
      if (id != 0) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(2, id) }
      if (depth != 0) { __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(3, depth) }
      __size
    }
    final override def serializedSize: Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
      {
        val __v = paramLst
        if (__v != "") {
          _output__.writeString(1, __v)
        }
      };
      {
        val __v = id
        if (__v != 0) {
          _output__.writeInt32(2, __v)
        }
      };
      {
        val __v = depth
        if (__v != 0) {
          _output__.writeInt32(3, __v)
        }
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): validation.ThisInvocation = {
      var __paramLst = this.paramLst
      var __id = this.id
      var __depth = this.depth
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __paramLst = _input__.readString()
          case 16 =>
            __id = _input__.readInt32()
          case 24 =>
            __depth = _input__.readInt32()
          case tag => _input__.skipField(tag)
        }
      }
      validation.ThisInvocation(
          paramLst = __paramLst,
          id = __id,
          depth = __depth
      )
    }
    def withParamLst(__v: String): ThisInvocation = copy(paramLst = __v)
    def withId(__v: Int): ThisInvocation = copy(id = __v)
    def withDepth(__v: Int): ThisInvocation = copy(depth = __v)
    def getFieldByNumber(__fieldNumber: Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = paramLst
          if (__t != "") __t else null
        }
        case 2 => {
          val __t = id
          if (__t != 0) __t else null
        }
        case 3 => {
          val __t = depth
          if (__t != 0) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(paramLst)
        case 2 => _root_.scalapb.descriptors.PInt(id)
        case 3 => _root_.scalapb.descriptors.PInt(depth)
      }
    }
    override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
    def companion = validation.ThisInvocation
}

object ThisInvocation extends com.trueaccord.scalapb.GeneratedMessageCompanion[validation.ThisInvocation] {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[validation.ThisInvocation] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): validation.ThisInvocation = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    validation.ThisInvocation(
      __fieldsMap.getOrElse(__fields.get(0), "").asInstanceOf[String],
      __fieldsMap.getOrElse(__fields.get(1), 0).asInstanceOf[Int],
      __fieldsMap.getOrElse(__fields.get(2), 0).asInstanceOf[Int]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[validation.ThisInvocation] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      validation.ThisInvocation(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[Int]).getOrElse(0),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[Int]).getOrElse(0)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = ValidationProto.javaDescriptor.getMessageTypes.get(4)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = ValidationProto.scalaDescriptor.messages(4)
  def messageCompanionForFieldNumber(__number: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = validation.ThisInvocation(
  )
  implicit class ThisInvocationLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, validation.ThisInvocation]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, validation.ThisInvocation](_l) {
    def paramLst: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.paramLst)((c_, f_) => c_.copy(paramLst = f_))
    def id: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.id)((c_, f_) => c_.copy(id = f_))
    def depth: _root_.com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.depth)((c_, f_) => c_.copy(depth = f_))
  }
  final val PARAMLST_FIELD_NUMBER = 1
  final val ID_FIELD_NUMBER = 2
  final val DEPTH_FIELD_NUMBER = 3
}
